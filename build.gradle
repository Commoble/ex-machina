buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mc_version}-${mod_version}"
group = "commoble.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
	api
	main
	test
}

configurations {
	apiCompile.extendsFrom(compile)
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    // mappings channel: 'snapshot', version: "${mappings_version}"
    mappings channel: 'snapshot', version: '20200814-mixed-1.16.2'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                exmachina {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                exmachina {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
	implementation sourceSets.api.output
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	from sourceSets.main.output.classesDirs
	from sourceSets.api.output.classesDirs
	from sourceSets.main.output.resourcesDir
	from sourceSets.api.output.resourcesDir
	
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}"
        ])
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	classifier = "api"
	from sourceSets.api.output
	from sourceSets.api.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
}

//task("uploadJars", dependsOn: "build") {
//	description = "uploads JARs"
//	if (project.hasProperty("local_maven")) {
//		apply plugin: "maven"
//		uploadArchives {
//			repositories {
//				mavenDeployer {
//					repository(url: "file://${local_maven}")
//				}
//			}
//		}
//	}
//}

jar.finalizedBy('reobfJar') 

repositories {
	maven {
		url 'https://www.dogforce-games.com/maven/'
	}
	maven {
        url "https://maven.tterrag.com/"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
			artifact apiJar
			artifact sourcesJar
			artifact javadocJar
        }
    }
    repositories {
        maven {
			name="localMaven"
            url "file:///${project.projectDir}/maven"
        }
    }
}